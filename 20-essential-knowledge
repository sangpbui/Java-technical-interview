People are getting far too complex for entry level development... i'm mid Level in a 
FTSE 100 and these are the things i use everyday in the order that i would lean them 
(examples are object oriented .Net based as that's what i use most, but there are 
equivalents in most OOP languages like Java and Python etc):

Section 1. 2nd nature Basics: these should be things you don't have to think about
Simple Types. If you can't deal with words (Strings), numbers (integers, doubles, 
floats etc) and binary options (booleans), you cant really do anything useful for 
non technical humans to understand

Type Manipulation. if you cant convert 11 (as a string) into 11 (as an integer) then 
you cannot do a calculation with written numbers. If you don't know how

Logical loops and conditions. (e.g If, Else If, For Each, While, Switch Case etc. ) 
if you cant do this you cannot program anything useful... and for gods sake don't 
create a potentially infinite loop in your program.

I/O or Read/Write. if you cant take inputs from somewhere and provide an output, 
what's the point?!

Functions/methods and overloads. Learn how to create them and reuse them as often as 
you can whenever a similar problem presents itself.

Error handling AND LOGGING. no function should be without a try catch [turns out this 
is fairly specific to my specific application specifications]. use what you learned 
doing I/O and output the errors to a log file so you can see where things are going 
wrong, even if they don't cause unexpected behaviour.

Section 2. Necessary basics: these might require a little more thought in terms of 
how you optimise certain things, but definitely not challenging on a day to day basis

Complex Types. Lists, collections, multidimensional arrays. all very useful when dealing
with lots of data

Interfacing: how to create reusable interfaces to be used throughout your application

Classes and inheritance and class structure: This will form the basic structure of all 
your programs

I/O 2 Database transactions. so how to query SQL to get your data, and how to update 
tables with the results.

Section 3. stuff you should know but might want to look up occasionally
learn a structural framework (MVVM, MVC)
Front end (Xaml if you're doing WPF, HTML/CSS + a bit of JS for web)
Section 4 Everything Else:
Google.... no i'm serious, google has the answer to every question you could possibly 
want to ask about programming. so unless you are doing something groundbreaking and new, 
google will likely have your answer. so long as you have a solid grasp of everything 
i put above you should be able to integrate any solution provided on the web into your 
own code. but it's up to you to make it as efficient as possible...
There is obviously much more to programming but that's pretty much all i have needed to 
use on a day to day basis for the last 3 years and everyone in my company seems to think 
i'm competent enough to be tasked with major projects.
